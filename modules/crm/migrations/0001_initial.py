# Generated by Django 5.2.7 on 2025-10-20 04:55

import crm.models
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('locations', '0001_initial'),
        ('tenants', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, max_length=255, verbose_name='Nome do Contato')),
                ('photo', models.ImageField(blank=True, null=True, upload_to=crm.models.contact_photo_directory_path, verbose_name='Foto')),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='Data de Nascimento')),
                ('gender', models.CharField(blank=True, choices=[('MALE', 'Masculino'), ('FEMALE', 'Feminino'), ('OTHER', 'Outro')], max_length=6, null=True, verbose_name='Gênero')),
                ('cpf', models.CharField(blank=True, max_length=11, null=True, verbose_name='CPF')),
                ('document_rg', models.CharField(blank=True, max_length=20, null=True, verbose_name='RG / Documento de Identidade')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='E-mail')),
                ('whatsapp', models.CharField(blank=True, max_length=20, null=True, verbose_name='WhatsApp')),
                ('phone_1', models.CharField(blank=True, max_length=20, null=True, verbose_name='Telefone 1')),
                ('phone_2', models.CharField(blank=True, max_length=20, null=True, verbose_name='Telefone 2')),
                ('social_linkedin', models.URLField(blank=True, null=True, verbose_name='LinkedIn')),
                ('social_facebook', models.URLField(blank=True, null=True, verbose_name='Facebook')),
                ('social_instagram', models.URLField(blank=True, null=True, verbose_name='Instagram')),
                ('social_x', models.URLField(blank=True, null=True, verbose_name='X (Twitter)')),
                ('street', models.CharField(blank=True, max_length=255, null=True, verbose_name='Logradouro')),
                ('number', models.CharField(blank=True, max_length=20, null=True, verbose_name='Número')),
                ('complement', models.CharField(blank=True, max_length=100, null=True, verbose_name='Complemento')),
                ('neighborhood', models.CharField(blank=True, max_length=100, null=True, verbose_name='Bairro')),
                ('postal_code', models.CharField(blank=True, max_length=9, null=True, verbose_name='CEP')),
                ('custom_data', models.JSONField(blank=True, default=dict, help_text='Campo para dados específicos do módulo (ex: {"turma": "Sub-10"}).', verbose_name='Dados Customizados')),
                ('location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='locations.location', verbose_name='Localidade (Cidade/Estado)')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='crm_contacts', to='tenants.tenant', verbose_name='Inquilino')),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='contact_profile', to=settings.AUTH_USER_MODEL, verbose_name='Usuário Dzaion Vinculado')),
            ],
            options={
                'verbose_name': 'Contato (CRM)',
                'verbose_name_plural': 'Contatos (CRM)',
                'ordering': ['name'],
                'constraints': [models.UniqueConstraint(condition=models.Q(('email__gt', ''), ('email__isnull', False)), fields=('tenant', 'email'), name='unique_contact_email_per_tenant'), models.UniqueConstraint(condition=models.Q(('cpf__gt', ''), ('cpf__isnull', False)), fields=('tenant', 'cpf'), name='unique_contact_cpf_per_tenant')],
            },
        ),
    ]
