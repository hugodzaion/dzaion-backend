# Generated by Django 5.2.7 on 2025-10-11 02:05

import accounts.storages
import accounts.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('name', models.CharField(help_text='Nome e sobrenome do usuário.', max_length=100, verbose_name='Nome Completo')),
                ('nickname', models.CharField(blank=True, help_text='Apelido ou primeiro nome. Gerado automaticamente se não for fornecido.', max_length=100, null=True, verbose_name='Apelido')),
                ('gender', models.CharField(blank=True, choices=[('male', 'Masculino'), ('female', 'Feminino')], help_text='Gênero do usuário.', max_length=10, null=True, verbose_name='Gênero')),
                ('cpf', models.CharField(help_text='Cadastro de Pessoa Física (CPF), apenas números.', max_length=11, unique=True, validators=[accounts.validators.validate_cpf], verbose_name='CPF')),
                ('date_birth', models.DateField(blank=True, help_text='Data de nascimento no formato AAAA-MM-DD.', null=True, verbose_name='Data de Nascimento')),
                ('photo', models.ImageField(blank=True, help_text='Foto de perfil do usuário. Será armazenada em um diretório único.', null=True, upload_to=accounts.storages.user_directory_path, verbose_name='Foto de Perfil')),
                ('email', models.EmailField(help_text='Endereço de e-mail principal. Utilizado para login e comunicação.', max_length=254, unique=True, verbose_name='E-mail')),
                ('email_verified_at', models.DateTimeField(blank=True, help_text='Timestamp de quando o e-mail do usuário foi verificado/ativado.', null=True, verbose_name='E-mail Verificado em')),
                ('whatsapp', models.CharField(db_index=True, help_text='Número de WhatsApp no formato internacional E.164 (ex: +5538999998888).', max_length=20, unique=True, verbose_name='WhatsApp (E.164)')),
                ('whatsapp_verified_at', models.DateTimeField(blank=True, help_text='Timestamp de quando o WhatsApp do usuário foi verificado.', null=True, verbose_name='Whatsapp verificado em')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designa que este usuário tem todas as permissões sem atribuí-las explicitamente.', verbose_name='Superusuário')),
                ('is_staff', models.BooleanField(default=False, help_text='Designa se o usuário pode fazer login no site de administração.', verbose_name='Membro da Equipe')),
                ('is_active', models.BooleanField(default=False, help_text='Designa se este usuário deve ser tratado como ativo. Desmarque em vez de excluir contas.', verbose_name='Ativo')),
                ('date_joined', models.DateTimeField(auto_now_add=True, help_text='Data e hora em que a conta do usuário foi criada no sistema.', verbose_name='Data de Criação')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Usuário',
                'verbose_name_plural': 'Usuários',
                'db_table': 'auth_user',
                'ordering': ['-date_joined'],
            },
        ),
    ]
